[{"title":"PHP使用CURL发送请求","date":"2018-01-03T09:17:46.000Z","path":"2018/01/03/PHP使用CURL发送请求/","text":"PHP使用CURL详解CURL是一个非常强大的开源库，支持很多协议，包括HTTP、FTP、TELNET等，我们使用它来发送HTTP请求。它给我们带来的好处是可以通过灵活的选项设置不同的HTTP协议参数，并且支持HTTPS。CURL可以根据URL前缀是“HTTP” 还是“HTTPS”自动选择是否加密发送内容。 使用CURL发送请求的基本流程使用CURL的PHP扩展完成一个HTTP请求的发送一般有以下几个步骤： 初始化连接句柄：curl_init() 设置CURL选项：curl_setopt() 执行并获取结果：curl_exec() 释放URL连接句柄：curl_close() 下面的程序片段是使用CURL发送HTTP的典型过程：12345678910111213// 1. 初始化$ch = curl_init();// 2. 设置选项，包括URLcurl_setopt($ch, CURLOPT_URL, \"http://www.baidu.com\");curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);curl_setopt($ch, CURLOPT_HEADER, 0);// 3. 执行并获取HTML文档内容$output = curl_exec($ch);if ($output === FALSE) &#123; echo \"CURL Error:\" . curl_error($ch);&#125;// 4. 释放curl句柄curl_close($ch); 获取CURL请求的输出信息在curl_exec()函数执行之后，可以使用curl_getinfo()函数获取CURL请求输出的相关信息，示例代码如下：123$output = curl_exec($ch);$info = curl_getinfo($ch);echo ' 获取 '.$info['url'].'耗时'.$info['total_time'].'秒'; 上述代码中curl_getinfo返回的是一个关联数组，包含以下数据： 1234567891011121314151617181920url:网络地址。content_type:内容编码。http_code:HTTP状态码。header_size:header的大小。request_size:请求的大小。filetime:文件创建的时间。ssl_verify_result:SSL验证结果。redirect_count:跳转计数。total_time:总耗时。namelookup_time:DNS查询耗时。connect_time:等待连接耗时。pretransfer_time:传输前准备耗时。size_uplpad:上传数据的大小。size_download:下载数据的大小。speed_download:下载速度。speed_upload:上传速度。download_content_length:下载内容的长度。upload_content_length:上传内容的长度。starttransfer_time:开始传输的时间表。redirect_time:重定向耗时。 使用CURL发送GET请求如何使用CURL来发送GET请求，发送GET请求的关键是拼装格式正确的URL。请求地址和GET数据由一个“?”分割,然后GET变量的名称和值用“=”分隔，各个GET名称和值由“&amp;”连接。PHP为我们提供了一个函数专门用来拼装GET请求和数据部分—http_build_query,该函数接受一个关联数组，返回由该关联数据描述的GET请求字符串。使用这个函数，结合CURL发送HTTP请求的一般流程，我们封闭了一个发送GET请求的函数—doCurlGetRequest,具体代码如下： 123456789101112131415/**@desc 封闭curl的调用接口，get的请求方式。*/function doCurlGetRequest($url, $data, $timeout = 5)&#123; if ($url == \"\" || $timeout &lt;= 0) &#123; return false; &#125; $url = $url . '?' . http_build_query($data); $con = curl_init((string)$url); curl_setopt($con, CURLOPT_HEADER, false); curl_setopt($con, CURLOPT_RETURNTRANSFER, true); curl_setopt($con, CURLOPT_TIMEOUT, (int)$timeout); return curl_exec($con);&#125; 使用CURL发送POST请求可以使用CURL提供的选项CURLOPT_POSTFIELDS，设置该选项为POST字符串数据就可以把请求放在正文中。同样我们实现了一个发送POST请求的函数—doCurlPostRequest，代码如下：123456789101112131415161718/** * @desc 封装 curl 的调用接口，post的请求方式 */function doCurlPostRequest($url, $requestString, $timeout = 5)&#123; if ($url == '' || $requestString == '' || $timeout &lt;= 0) &#123; return false; &#125; $ch = curl_init((string)$url); //设置url curl_setopt($ch, CURLOPT_HEADER, false); //设置头信息 curl_setopt($ch, CURLOPT_POST, true); //设置发送方式为post请求 curl_setopt($ch, CURLOPT_POSTFIELDS, $requestString); //设置post的数据 curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); //设置curl_exec获取的信息的返回方式 curl_setopt($ch, CURLOPT_TIMEOUT, (int)$timeout); //设置超时时间 curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); //禁止 cURL 验证对等证书（peer’s certificate） curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); //表示不检查证书 return curl_exec($ch);&#125; CURL设置Authorization头信息&amp;发送接收JSON数据相关代码：123456789101112131415$url = \"http://test.dev/check.php\";$data = array('username' =&gt; 'zhangsan', 'age' =&gt; 30);$opt_data = json_encode($data);$header = array();$header[] = 'Authorization:'.'test';$header[] = 'Accept:application/json';$header[] = 'Content-Type:application/json;charset=utf-8';$curl = curl_init(); //初始化curl_setopt($curl,CURLOPT_URL,$url); //设置urlcurl_setopt($curl,CURLOPT_HTTPHEADER,$header);curl_setopt($curl,CURLOPT_POSTFIELDS,$opt_data);$result = curl_exec($curl);curl_close($curl); 在接收端，发现使用POST是接收不到数据的，当然_REQUEST也是一样，那么我们传的JSON数据哪里去了呢？怎么才能接收到传递的JSON数据？123$str = file_get_contents(\"php://input\");//或者$str = $GLOBALS['HTTP_RAW_POST_DATA']; 为什么会出现POST获取不到传送的数据的问题呢？因为$_POST只能接收文档类型为“Content-Type: application/x-www-form-urlencoded”格式提交的数据。HTTP_RAW_POST_DATA是用来接收原始的POST数据的，只有在碰到未识别的MIME类型时才会被填充，所以使用它可以获取到上面代码POST的json数据。如果使用的是php7，$GLOBALS[&#39;HTTP_RAW_POST_DATA&#39;]的值为空，原因是php7已移除这个全局变量。所以直接用file_get_contents(&quot;php://input&quot;)接收最好。","tags":[{"name":"curl","slug":"curl","permalink":"http://yoursite.com/tags/curl/"}]},{"title":"Hexo教程","date":"2018-01-03T08:17:46.000Z","path":"2018/01/03/Hexo教程/","text":"","tags":[]},{"title":"Hello World","date":"2018-01-03T03:54:00.909Z","path":"2018/01/03/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info:111 Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]