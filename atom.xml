<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <subtitle>专注、执着...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-04T11:22:35.087Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>simon_min</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu上的防火墙iptables简单使用</title>
    <link href="http://yoursite.com/2018/01/04/Ubuntu%E4%B8%8A%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99iptables/"/>
    <id>http://yoursite.com/2018/01/04/Ubuntu上的防火墙iptables/</id>
    <published>2018-01-04T10:37:30.000Z</published>
    <updated>2018-01-04T11:22:35.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1.安装配置"></a>1.安装配置</h2><p>Ubuntu默认安装是没有开启任何防火墙的，为了服务器的安全，建议大家安装启用防火墙设置，这里推荐使用iptables防火墙.如果mysql启本地使用,可以不用打开3306端口.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@virtual-machine:~# whereis iptables    //查看系统是否安装防火墙可以看到:</span><br><span class="line">iptables: /sbin/iptables /usr/share/iptables /usr/share/man/man8/iptables.8.gz  //表示已经安装iptables</span><br></pre></td></tr></table></figure><p>如果没有安装，请运行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@virtual-machine:~# apt-get install iptables</span><br></pre></td></tr></table></figure></p><h2 id="2-查看iptables配置"><a href="#2-查看iptables配置" class="headerlink" title="2.查看iptables配置"></a>2.查看iptables配置</h2><p>1）按列表查看访问规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@virtual-machine:~# iptables -L</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br></pre></td></tr></table></figure></p><p>2）按INPUT，OUTPUT，FORWARD三个类查看访问规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@virtual-machine:~# iptables -S</span><br><span class="line">-P INPUT ACCEPT</span><br><span class="line">-P FORWARD ACCEPT</span><br><span class="line">-P OUTPUT ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --dport 80 -j DROP</span><br></pre></td></tr></table></figure></p><h2 id="3-设置iptables的缺省规则"><a href="#3-设置iptables的缺省规则" class="headerlink" title="3.设置iptables的缺省规则"></a>3.设置iptables的缺省规则</h2><p>未设置其他的规则时的INPUT/OUTPUT/FORWARD数据包设置为ACCEPT是允许接收，设置为DROP是拒绝接收。</p><ul><li>INPUT是从外头进入本机的数据包</li><li>OUTPUT是从本机出去的数据包</li><li>FORWARD是经过本机的数据包，用在路由器等中转设备上，对于终端设备，不常用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -P INPUT ACCEPT/DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT/DROP</span><br><span class="line">iptables -P FORWARD ACCEPT/DROP</span><br></pre></td></tr></table></figure><p>缺省规则是给予设置有很大的方便，比如说，你要设置只允许别人访问本机的http服务，那么可以设置INPUT和OUTPUT缺省为DROP，拒绝接收，设置一条从外部通过http访问的规则为ACCEPT即可。反过来，如果你要设置除了telnet服务，其他任何服务都允许访问，那么可以设置INPUT和OUTPUT缺省为ACCEPT，设置一条从外部通过telnet访问的规则为DROP即可。</p><h2 id="4-添加iptables的规则"><a href="#4-添加iptables的规则" class="headerlink" title="4.添加iptables的规则"></a>4.添加iptables的规则</h2><p>1）添加INPUT链的规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 23 -j DROP</span><br></pre></td></tr></table></figure></p><p>-A代表append添加规则，后面带INPUT代表这种数据包，-p代表使用的协议为tcp，–dport代表端口为23，-j代表使用DROP还是ACCEPT，DROP为拒绝<br>意思为拒绝tcp协议端口为23的数据包进入，而默认时telnet使用tcp23端口，所以此时其他机器telnet访问本机时被拒绝</p><p>2）添加OUTPUT链的规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A OUTPUT -p tcp --dport 80 -j DROP</span><br></pre></td></tr></table></figure></p><p>-A代表append添加规则，后面带OUTPUT代表这种数据包，-p代表使用的协议为tcp，–dport代表端口为80，-j代表使用DROP还是ACCEPT，DROP为拒绝<br>意思为拒绝tcp协议端口为80的数据包出去，而通常http使用的端口为80，所以此时本机访问http服务80时被拒绝。</p><p>3）FORWARD和前两种方式一样，只不过是经过的数据包。</p><p>4）自定义链的规则</p><h2 id="5-存储与恢复iptables的规则"><a href="#5-存储与恢复iptables的规则" class="headerlink" title="5.存储与恢复iptables的规则"></a>5.存储与恢复iptables的规则</h2><p>因为上面设置规则后，重启则规则失效，所以要将其存储起来。使用命令 iptables-save &gt;存储文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@virtual-machine:~# iptables-save &gt;/etc/iptables.rules</span><br></pre></td></tr></table></figure><p>存入文件iptables.rules中了，当电脑重启时再使用命令iptables-restore &lt;存储文件名</p><h2 id="6-清除iptables的规则"><a href="#6-清除iptables的规则" class="headerlink" title="6.清除iptables的规则"></a>6.清除iptables的规则</h2><p>1）清除预设表中的所有规则链的规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -F</span><br></pre></td></tr></table></figure><p>运行此后，所有的规则链（包括自定义链和三种链）都被清空</p><p>2）清除预设表filter中使用的自定义链（即除了INPUT/OUTPUT/FORWARD链）中的规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -X</span><br></pre></td></tr></table></figure></p><p>3）清除单条规则和前面第三节的添加规则相同，这里把-A添加改为-D即可删除已经设置了的规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -D OUTPUT -p tcp --dport 80 -j DROP</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-安装配置&quot;&gt;&lt;a href=&quot;#1-安装配置&quot; class=&quot;headerlink&quot; title=&quot;1.安装配置&quot;&gt;&lt;/a&gt;1.安装配置&lt;/h2&gt;&lt;p&gt;Ubuntu默认安装是没有开启任何防火墙的，为了服务器的安全，建议大家安装启用防火墙设置，这里推荐使用ipt
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="iptables" scheme="http://yoursite.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>PHP使用CURL发送请求</title>
    <link href="http://yoursite.com/2018/01/03/PHP%E4%BD%BF%E7%94%A8CURL%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2018/01/03/PHP使用CURL发送请求/</id>
    <published>2018-01-03T09:17:46.000Z</published>
    <updated>2018-01-04T08:12:03.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP使用CURL详解"><a href="#PHP使用CURL详解" class="headerlink" title="PHP使用CURL详解"></a>PHP使用CURL详解</h2><p>CURL是一个非常强大的开源库，支持很多协议，包括HTTP、FTP、TELNET等，我们使用它来发送HTTP请求。它给我们带来的好处是可以通过灵活的选项设置不同的HTTP协议参数，并且支持HTTPS。CURL可以根据URL前缀是“HTTP” 还是“HTTPS”自动选择是否加密发送内容。</p><h2 id="使用CURL发送请求的基本流程"><a href="#使用CURL发送请求的基本流程" class="headerlink" title="使用CURL发送请求的基本流程"></a>使用CURL发送请求的基本流程</h2><p>使用CURL的PHP扩展完成一个HTTP请求的发送一般有以下几个步骤：</p><ul><li>初始化连接句柄：curl_init()</li><li>设置CURL选项：curl_setopt()</li><li>执行并获取结果：curl_exec()</li><li>释放URL连接句柄：curl_close()</li></ul><p>下面的程序片段是使用CURL发送HTTP的典型过程：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 初始化</span></span><br><span class="line">$ch = curl_init();</span><br><span class="line"><span class="comment">// 2. 设置选项，包括URL</span></span><br><span class="line">curl_setopt($ch, CURLOPT_URL, <span class="string">"http://www.baidu.com"</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3. 执行并获取HTML文档内容</span></span><br><span class="line">$output = curl_exec($ch);</span><br><span class="line"><span class="keyword">if</span> ($output === <span class="keyword">FALSE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"CURL Error:"</span> . curl_error($ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 释放curl句柄</span></span><br><span class="line">curl_close($ch);</span><br></pre></td></tr></table></figure></p><h2 id="获取CURL请求的输出信息"><a href="#获取CURL请求的输出信息" class="headerlink" title="获取CURL请求的输出信息"></a>获取CURL请求的输出信息</h2><p>在<code>curl_exec()</code>函数执行之后，可以使用<code>curl_getinfo()</code>函数获取CURL请求输出的相关信息，示例代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$output = curl_exec($ch);</span><br><span class="line">$info = curl_getinfo($ch);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">' 获取 '</span>.$info[<span class="string">'url'</span>].<span class="string">'耗时'</span>.$info[<span class="string">'total_time'</span>].<span class="string">'秒'</span>;</span><br></pre></td></tr></table></figure></p><p>上述代码中curl_getinfo返回的是一个关联数组，包含以下数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">url:网络地址。</span><br><span class="line">content_type:内容编码。</span><br><span class="line">http_code:HTTP状态码。</span><br><span class="line">header_size:header的大小。</span><br><span class="line">request_size:请求的大小。</span><br><span class="line">filetime:文件创建的时间。</span><br><span class="line">ssl_verify_result:SSL验证结果。</span><br><span class="line">redirect_count:跳转计数。</span><br><span class="line">total_time:总耗时。</span><br><span class="line">namelookup_time:DNS查询耗时。</span><br><span class="line">connect_time:等待连接耗时。</span><br><span class="line">pretransfer_time:传输前准备耗时。</span><br><span class="line">size_uplpad:上传数据的大小。</span><br><span class="line">size_download:下载数据的大小。</span><br><span class="line">speed_download:下载速度。</span><br><span class="line">speed_upload:上传速度。</span><br><span class="line">download_content_length:下载内容的长度。</span><br><span class="line">upload_content_length:上传内容的长度。</span><br><span class="line">starttransfer_time:开始传输的时间表。</span><br><span class="line">redirect_time:重定向耗时。</span><br></pre></td></tr></table></figure><h2 id="使用CURL发送GET请求"><a href="#使用CURL发送GET请求" class="headerlink" title="使用CURL发送GET请求"></a>使用CURL发送GET请求</h2><p>如何使用CURL来发送GET请求，发送GET请求的关键是拼装格式正确的URL。请求地址和GET数据由一个“?”分割,然后GET变量的名称和值用“=”分隔，各个GET名称和值由“&amp;”连接。PHP为我们提供了一个函数专门用来拼装GET请求和数据部分—http_build_query,该函数接受一个关联数组，返回由该关联数据描述的GET请求字符串。使用这个函数，结合CURL发送HTTP请求的一般流程，我们封闭了一个发送GET请求的函数—doCurlGetRequest,具体代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*<span class="doctag">@desc</span> 封闭curl的调用接口，get的请求方式。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doCurlGetRequest</span><span class="params">($url, $data, $timeout = <span class="number">5</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($url == <span class="string">""</span> || $timeout &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $url = $url . <span class="string">'?'</span> . http_build_query($data);</span><br><span class="line">    $con = curl_init((string)$url);</span><br><span class="line">    curl_setopt($con, CURLOPT_HEADER, <span class="keyword">false</span>);</span><br><span class="line">    curl_setopt($con, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">    curl_setopt($con, CURLOPT_TIMEOUT, (int)$timeout);</span><br><span class="line">    <span class="keyword">return</span> curl_exec($con);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用CURL发送POST请求"><a href="#使用CURL发送POST请求" class="headerlink" title="使用CURL发送POST请求"></a>使用CURL发送POST请求</h2><p>可以使用CURL提供的选项CURLOPT_POSTFIELDS，设置该选项为POST字符串数据就可以把请求放在正文中。同样我们实现了一个发送POST请求的函数—doCurlPostRequest，代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 封装 curl 的调用接口，post的请求方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doCurlPostRequest</span><span class="params">($url, $requestString, $timeout = <span class="number">5</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($url == <span class="string">''</span> || $requestString == <span class="string">''</span> || $timeout &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $ch = curl_init((string)$url);    <span class="comment">//设置url</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="keyword">false</span>);   <span class="comment">//设置头信息</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_POST, <span class="keyword">true</span>);  <span class="comment">//设置发送方式为post请求</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_POSTFIELDS, $requestString);  <span class="comment">//设置post的数据</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);    <span class="comment">//设置curl_exec获取的信息的返回方式</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_TIMEOUT, (int)$timeout);  <span class="comment">//设置超时时间</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">false</span>); <span class="comment">//禁止 cURL 验证对等证书（peer’s certificate）</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">false</span>);    <span class="comment">//表示不检查证书</span></span><br><span class="line">    <span class="keyword">return</span> curl_exec($ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="CURL设置Authorization头信息-amp-发送接收JSON数据"><a href="#CURL设置Authorization头信息-amp-发送接收JSON数据" class="headerlink" title="CURL设置Authorization头信息&amp;发送接收JSON数据"></a>CURL设置Authorization头信息&amp;发送接收JSON数据</h2><p>相关代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$url = <span class="string">"http://test.dev/check.php"</span>;</span><br><span class="line">$data = <span class="keyword">array</span>(<span class="string">'username'</span> =&gt; <span class="string">'zhangsan'</span>, <span class="string">'age'</span> =&gt; <span class="number">30</span>);</span><br><span class="line">$opt_data = json_encode($data);</span><br><span class="line"></span><br><span class="line">$header = <span class="keyword">array</span>();</span><br><span class="line">$header[] = <span class="string">'Authorization:'</span>.<span class="string">'test'</span>;</span><br><span class="line">$header[] = <span class="string">'Accept:application/json'</span>;</span><br><span class="line">$header[] = <span class="string">'Content-Type:application/json;charset=utf-8'</span>;</span><br><span class="line"></span><br><span class="line">$curl = curl_init();  <span class="comment">//初始化</span></span><br><span class="line">curl_setopt($curl,CURLOPT_URL,$url);  <span class="comment">//设置url</span></span><br><span class="line">curl_setopt($curl,CURLOPT_HTTPHEADER,$header);</span><br><span class="line">curl_setopt($curl,CURLOPT_POSTFIELDS,$opt_data);</span><br><span class="line">$result = curl_exec($curl);</span><br><span class="line">curl_close($curl);</span><br></pre></td></tr></table></figure></p><p>在接收端，发现使用POST是接收不到数据的，当然_REQUEST也是一样，那么我们传的JSON数据哪里去了呢？怎么才能接收到传递的JSON数据？<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str = file_get_contents(<span class="string">"php://input"</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">$str = $GLOBALS[<span class="string">'HTTP_RAW_POST_DATA'</span>];</span><br></pre></td></tr></table></figure></p><p>为什么会出现POST获取不到传送的数据的问题呢？<br>因为$_POST只能接收文档类型为“Content-Type: application/x-www-form-urlencoded”格式提交的数据。<br>HTTP_RAW_POST_DATA是用来接收原始的POST数据的，只有在碰到未识别的MIME类型时才会被填充，所以使用它可以获取到上面代码POST的json数据。<br>如果使用的是php7，<code>$GLOBALS[&#39;HTTP_RAW_POST_DATA&#39;]</code>的值为空，原因是php7已移除这个全局变量。所以直接用<code>file_get_contents(&quot;php://input&quot;)</code>接收最好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP使用CURL详解&quot;&gt;&lt;a href=&quot;#PHP使用CURL详解&quot; class=&quot;headerlink&quot; title=&quot;PHP使用CURL详解&quot;&gt;&lt;/a&gt;PHP使用CURL详解&lt;/h2&gt;&lt;p&gt;CURL是一个非常强大的开源库，支持很多协议，包括HTTP、FTP、
      
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="curl" scheme="http://yoursite.com/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/03/hello-world/"/>
    <id>http://yoursite.com/2018/01/03/hello-world/</id>
    <published>2018-01-03T08:17:46.000Z</published>
    <updated>2018-01-04T08:19:53.209Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info:111 <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
